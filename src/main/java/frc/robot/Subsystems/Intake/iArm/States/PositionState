package frc.robot.Subsystems.Intake.IntakeArm.States;

import edu.wpi.first.wpilibj2.command.Command;
import frc.robot.Constants.Constants;
import frc.robot.Constants.Constants.IntakeConstants.intakePos;
import frc.robot.Subsystems.Intake.IntakeArm.iArmSubsystem;

public class PositionState extends Command{

    private intakePos position;
    private double holdPosition;


  
    public PositionState(intakePos position) {
      addRequirements(iArmSubsystem.getInstance());  
  
      this.position = position;
    }
  
    @Override
    public void initialize() {
  
      holdPosition = iArmSubsystem.getInstance().getIntakeArmPos();

      iArmSubsystem.enable();

      switch(position) {
        case FLOOR :
          iArmSubsystem.getInstance().setArmSetpoint(Constants.IntakeConstants.floor);
          iArmSubsystem.getInstance().setFeedForward(0.02); 
          break;
  
        case AMP :
          iArmSubsystem.getInstance().setArmSetpoint(Constants.IntakeConstants.amp);
          iArmSubsystem.getInstance().setFeedForward(0.01);
          break;  
          
        case SPEAKER :
          iArmSubsystem.getInstance().setArmSetpoint(Constants.IntakeConstants.speaker);
          iArmSubsystem.getInstance().setFeedForward(0.2);
          break;
  
        case HOLD :
        holdPosition = iArmSubsystem.getInstance().getIntakeArmPos();
        iArmSubsystem.getInstance().setArmSetpoint(holdPosition);
        ArmSubsystem.getInstance().setFeedForward(0.0);
          break;
      }
      iArmSubsystem.getInstance().enable();
    }
  
    public void execute() {
      System.out.println(iArmSubsystem.getInstance().getIntakeArmPos());
    }
  
    @Override
    public void end(boolean interrupted) {
      iArmSubsystem.getInstance().disable();
      iArmSubsystem.getInstance().setPower(0);
    }
}